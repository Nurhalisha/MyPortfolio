{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\pokedex\\\\pokedexmini\\\\src\\\\components\\\\Battle.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Battle = ({\n  playerPokemon,\n  opponentPokemon,\n  onBattleEnd\n}) => {\n  _s();\n  const [playerHp, setPlayerHp] = useState(playerPokemon.stats.hp);\n  const [opponentHp, setOpponentHp] = useState(opponentPokemon.stats.hp);\n  const [turnMessage, setTurnMessage] = useState('');\n\n  // Damage calculation based on Attack vs Defense (simplified formula)\n  const calculateDamage = (attacker, defender) => {\n    const attack = attacker.stats.attack;\n    const defense = defender.stats.defense;\n    const randomFactor = Math.random() * 0.1 + 0.85; // Random factor to vary damage output\n    return Math.max(1, Math.floor(attack / defense * randomFactor));\n  };\n  const startBattle = () => {\n    let currentPlayerHp = playerHp;\n    let currentOpponentHp = opponentHp;\n    const playerSpeed = playerPokemon.stats.speed;\n    const opponentSpeed = opponentPokemon.stats.speed;\n    const playerFirst = playerSpeed >= opponentSpeed; // Determine who goes first\n\n    let round = 1;\n    const battleInterval = setInterval(() => {\n      // Display turn-based messages\n      setTurnMessage(`Round ${round}:`);\n      let damageToOpponent = calculateDamage(playerPokemon, opponentPokemon);\n      let damageToPlayer = calculateDamage(opponentPokemon, playerPokemon);\n      if (playerFirst) {\n        // Player attacks first\n        currentOpponentHp -= damageToOpponent;\n        if (currentOpponentHp <= 0) {\n          currentOpponentHp = 0;\n          clearInterval(battleInterval);\n          onBattleEnd(playerPokemon); // Player wins\n          return;\n        }\n\n        // Opponent attacks after player\n        currentPlayerHp -= damageToPlayer;\n        if (currentPlayerHp <= 0) {\n          currentPlayerHp = 0;\n          clearInterval(battleInterval);\n          onBattleEnd(opponentPokemon); // Opponent wins\n          return;\n        }\n      } else {\n        // Opponent attacks first\n        currentPlayerHp -= damageToPlayer;\n        if (currentPlayerHp <= 0) {\n          currentPlayerHp = 0;\n          clearInterval(battleInterval);\n          onBattleEnd(opponentPokemon); // Opponent wins\n          return;\n        }\n\n        // Player attacks after opponent\n        currentOpponentHp -= damageToOpponent;\n        if (currentOpponentHp <= 0) {\n          currentOpponentHp = 0;\n          clearInterval(battleInterval);\n          onBattleEnd(playerPokemon); // Player wins\n          return;\n        }\n      }\n      setPlayerHp(currentPlayerHp);\n      setOpponentHp(currentOpponentHp);\n      round++;\n    }, 1000); // Simulate battle every second\n  };\n\n  // Start battle when the component mounts\n  useEffect(() => {\n    startBattle();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Battle in Progress!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: turnMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Player's Pok\\xE9mon: \", playerPokemon.name, \" | HP: \", playerHp]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Opponent's Pok\\xE9mon: \", opponentPokemon.name, \" | HP: \", opponentHp]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Stats Comparison:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Stat\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: playerPokemon.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: opponentPokemon.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Winner\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: ['hp', 'attack', 'defense', 'speed'].map(stat => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: stat.charAt(0).toUpperCase() + stat.slice(1)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: playerPokemon.stats[stat]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: opponentPokemon.stats[stat]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: playerPokemon.stats[stat] > opponentPokemon.stats[stat] ? playerPokemon.name : opponentPokemon.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 17\n            }, this)]\n          }, stat, true, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(Battle, \"QZi5LRbUT5DRi1udNAquhcMykr0=\");\n_c = Battle;\nexport default Battle;\nvar _c;\n$RefreshReg$(_c, \"Battle\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Battle","playerPokemon","opponentPokemon","onBattleEnd","_s","playerHp","setPlayerHp","stats","hp","opponentHp","setOpponentHp","turnMessage","setTurnMessage","calculateDamage","attacker","defender","attack","defense","randomFactor","Math","random","max","floor","startBattle","currentPlayerHp","currentOpponentHp","playerSpeed","speed","opponentSpeed","playerFirst","round","battleInterval","setInterval","damageToOpponent","damageToPlayer","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","name","map","stat","charAt","toUpperCase","slice","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/pokedex/pokedexmini/src/components/Battle.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst Battle = ({ playerPokemon, opponentPokemon, onBattleEnd }) => {\r\n  const [playerHp, setPlayerHp] = useState(playerPokemon.stats.hp);\r\n  const [opponentHp, setOpponentHp] = useState(opponentPokemon.stats.hp);\r\n  const [turnMessage, setTurnMessage] = useState('');\r\n\r\n  // Damage calculation based on Attack vs Defense (simplified formula)\r\n  const calculateDamage = (attacker, defender) => {\r\n    const attack = attacker.stats.attack;\r\n    const defense = defender.stats.defense;\r\n    const randomFactor = Math.random() * 0.1 + 0.85;  // Random factor to vary damage output\r\n    return Math.max(1, Math.floor((attack / defense) * randomFactor));\r\n  };\r\n\r\n  const startBattle = () => {\r\n    let currentPlayerHp = playerHp;\r\n    let currentOpponentHp = opponentHp;\r\n\r\n    const playerSpeed = playerPokemon.stats.speed;\r\n    const opponentSpeed = opponentPokemon.stats.speed;\r\n\r\n    const playerFirst = playerSpeed >= opponentSpeed;  // Determine who goes first\r\n\r\n    let round = 1;\r\n    const battleInterval = setInterval(() => {\r\n      // Display turn-based messages\r\n      setTurnMessage(`Round ${round}:`);\r\n\r\n      let damageToOpponent = calculateDamage(playerPokemon, opponentPokemon);\r\n      let damageToPlayer = calculateDamage(opponentPokemon, playerPokemon);\r\n\r\n      if (playerFirst) {\r\n        // Player attacks first\r\n        currentOpponentHp -= damageToOpponent;\r\n        if (currentOpponentHp <= 0) {\r\n          currentOpponentHp = 0;\r\n          clearInterval(battleInterval);\r\n          onBattleEnd(playerPokemon);  // Player wins\r\n          return;\r\n        }\r\n\r\n        // Opponent attacks after player\r\n        currentPlayerHp -= damageToPlayer;\r\n        if (currentPlayerHp <= 0) {\r\n          currentPlayerHp = 0;\r\n          clearInterval(battleInterval);\r\n          onBattleEnd(opponentPokemon);  // Opponent wins\r\n          return;\r\n        }\r\n      } else {\r\n        // Opponent attacks first\r\n        currentPlayerHp -= damageToPlayer;\r\n        if (currentPlayerHp <= 0) {\r\n          currentPlayerHp = 0;\r\n          clearInterval(battleInterval);\r\n          onBattleEnd(opponentPokemon);  // Opponent wins\r\n          return;\r\n        }\r\n\r\n        // Player attacks after opponent\r\n        currentOpponentHp -= damageToOpponent;\r\n        if (currentOpponentHp <= 0) {\r\n          currentOpponentHp = 0;\r\n          clearInterval(battleInterval);\r\n          onBattleEnd(playerPokemon);  // Player wins\r\n          return;\r\n        }\r\n      }\r\n\r\n      setPlayerHp(currentPlayerHp);\r\n      setOpponentHp(currentOpponentHp);\r\n      round++;\r\n    }, 1000);  // Simulate battle every second\r\n  };\r\n\r\n  // Start battle when the component mounts\r\n  useEffect(() => {\r\n    startBattle();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Battle in Progress!</h2>\r\n      <p>{turnMessage}</p>\r\n      <div>\r\n        <h3>Player's Pokémon: {playerPokemon.name} | HP: {playerHp}</h3>\r\n        <h3>Opponent's Pokémon: {opponentPokemon.name} | HP: {opponentHp}</h3>\r\n      </div>\r\n      <div>\r\n        <h4>Stats Comparison:</h4>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Stat</th>\r\n              <th>{playerPokemon.name}</th>\r\n              <th>{opponentPokemon.name}</th>\r\n              <th>Winner</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {['hp', 'attack', 'defense', 'speed'].map(stat => (\r\n              <tr key={stat}>\r\n                <td>{stat.charAt(0).toUpperCase() + stat.slice(1)}</td>\r\n                <td>{playerPokemon.stats[stat]}</td>\r\n                <td>{opponentPokemon.stats[stat]}</td>\r\n                <td>{playerPokemon.stats[stat] > opponentPokemon.stats[stat] ? playerPokemon.name : opponentPokemon.name}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Battle;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}