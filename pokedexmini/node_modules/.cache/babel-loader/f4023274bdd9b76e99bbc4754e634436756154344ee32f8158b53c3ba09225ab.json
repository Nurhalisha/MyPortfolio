{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\pokedex\\\\pokedexmini\\\\src\\\\components\\\\Battle.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Battle = ({\n  playerPokemon,\n  opponentPokemon,\n  onBattleEnd\n}) => {\n  _s();\n  // Initialize the HP for both Pokémon\n  const [playerHp, setPlayerHp] = useState(playerPokemon.stats.hp);\n  const [opponentHp, setOpponentHp] = useState(opponentPokemon.stats.hp);\n\n  // Calculate Damage Based on Attack and HP\n  const calculateDamage = (attacker, defender) => {\n    const attack = attacker.stats.attack;\n    const defense = defender.stats.defense;\n    const randomFactor = Math.random() * 0.1 + 0.85; // Add randomness to the damage output (85% to 100% of damage)\n    return Math.max(1, Math.floor(attack / defense * randomFactor));\n  };\n\n  // Simulate the Battle\n  const startBattle = () => {\n    let currentPlayerHp = playerHp;\n    let currentOpponentHp = opponentHp;\n    let round = 1;\n    const battleInterval = setInterval(() => {\n      // Determine who goes first based on speed\n      const playerSpeed = playerPokemon.stats.speed;\n      const opponentSpeed = opponentPokemon.stats.speed;\n      let playerAttackFirst = playerSpeed >= opponentSpeed;\n\n      // Determine damage\n      let damageToOpponent = calculateDamage(playerPokemon, opponentPokemon);\n      let damageToPlayer = calculateDamage(opponentPokemon, playerPokemon);\n      if (playerAttackFirst) {\n        currentOpponentHp -= damageToOpponent;\n        if (currentOpponentHp <= 0) {\n          currentOpponentHp = 0;\n          clearInterval(battleInterval);\n          alert(`${playerPokemon.name} wins!`);\n          onBattleEnd(playerPokemon);\n          return;\n        }\n\n        // Opponent attacks after player\n        currentPlayerHp -= damageToPlayer;\n        if (currentPlayerHp <= 0) {\n          currentPlayerHp = 0;\n          clearInterval(battleInterval);\n          alert(`${opponentPokemon.name} wins!`);\n          onBattleEnd(opponentPokemon);\n          return;\n        }\n      } else {\n        // Opponent attacks first\n        currentPlayerHp -= damageToPlayer;\n        if (currentPlayerHp <= 0) {\n          currentPlayerHp = 0;\n          clearInterval(battleInterval);\n          alert(`${opponentPokemon.name} wins!`);\n          onBattleEnd(opponentPokemon);\n          return;\n        }\n\n        // Player attacks after opponent\n        currentOpponentHp -= damageToOpponent;\n        if (currentOpponentHp <= 0) {\n          currentOpponentHp = 0;\n          clearInterval(battleInterval);\n          alert(`${playerPokemon.name} wins!`);\n          onBattleEnd(playerPokemon);\n          return;\n        }\n      }\n      setPlayerHp(currentPlayerHp);\n      setOpponentHp(currentOpponentHp);\n      round++;\n    }, 1000); // Battle simulation runs every second (1000ms)\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Battle Time!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Player's Pokemon: \", playerPokemon.name, \" | HP: \", playerHp]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Opponent's Pokemon: \", opponentPokemon.name, \" | HP: \", opponentHp]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startBattle,\n      children: \"Start Battle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_s(Battle, \"CS8lcks/y/cuDOxEdJf2wsNu+MI=\");\n_c = Battle;\nexport default Battle;\nvar _c;\n$RefreshReg$(_c, \"Battle\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Battle","playerPokemon","opponentPokemon","onBattleEnd","_s","playerHp","setPlayerHp","stats","hp","opponentHp","setOpponentHp","calculateDamage","attacker","defender","attack","defense","randomFactor","Math","random","max","floor","startBattle","currentPlayerHp","currentOpponentHp","round","battleInterval","setInterval","playerSpeed","speed","opponentSpeed","playerAttackFirst","damageToOpponent","damageToPlayer","clearInterval","alert","name","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/pokedex/pokedexmini/src/components/Battle.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst Battle = ({ playerPokemon, opponentPokemon, onBattleEnd }) => {\r\n  // Initialize the HP for both Pokémon\r\n  const [playerHp, setPlayerHp] = useState(playerPokemon.stats.hp);\r\n  const [opponentHp, setOpponentHp] = useState(opponentPokemon.stats.hp);\r\n\r\n  // Calculate Damage Based on Attack and HP\r\n  const calculateDamage = (attacker, defender) => {\r\n    const attack = attacker.stats.attack;\r\n    const defense = defender.stats.defense;\r\n    const randomFactor = Math.random() * 0.1 + 0.85;  // Add randomness to the damage output (85% to 100% of damage)\r\n    return Math.max(1, Math.floor((attack / defense) * randomFactor));\r\n  };\r\n\r\n  // Simulate the Battle\r\n  const startBattle = () => {\r\n    let currentPlayerHp = playerHp;\r\n    let currentOpponentHp = opponentHp;\r\n    let round = 1;\r\n\r\n    const battleInterval = setInterval(() => {\r\n      // Determine who goes first based on speed\r\n      const playerSpeed = playerPokemon.stats.speed;\r\n      const opponentSpeed = opponentPokemon.stats.speed;\r\n\r\n      let playerAttackFirst = playerSpeed >= opponentSpeed;\r\n\r\n      // Determine damage\r\n      let damageToOpponent = calculateDamage(playerPokemon, opponentPokemon);\r\n      let damageToPlayer = calculateDamage(opponentPokemon, playerPokemon);\r\n\r\n      if (playerAttackFirst) {\r\n        currentOpponentHp -= damageToOpponent;\r\n        if (currentOpponentHp <= 0) {\r\n          currentOpponentHp = 0;\r\n          clearInterval(battleInterval);\r\n          alert(`${playerPokemon.name} wins!`);\r\n          onBattleEnd(playerPokemon);\r\n          return;\r\n        }\r\n\r\n        // Opponent attacks after player\r\n        currentPlayerHp -= damageToPlayer;\r\n        if (currentPlayerHp <= 0) {\r\n          currentPlayerHp = 0;\r\n          clearInterval(battleInterval);\r\n          alert(`${opponentPokemon.name} wins!`);\r\n          onBattleEnd(opponentPokemon);\r\n          return;\r\n        }\r\n      } else {\r\n        // Opponent attacks first\r\n        currentPlayerHp -= damageToPlayer;\r\n        if (currentPlayerHp <= 0) {\r\n          currentPlayerHp = 0;\r\n          clearInterval(battleInterval);\r\n          alert(`${opponentPokemon.name} wins!`);\r\n          onBattleEnd(opponentPokemon);\r\n          return;\r\n        }\r\n\r\n        // Player attacks after opponent\r\n        currentOpponentHp -= damageToOpponent;\r\n        if (currentOpponentHp <= 0) {\r\n          currentOpponentHp = 0;\r\n          clearInterval(battleInterval);\r\n          alert(`${playerPokemon.name} wins!`);\r\n          onBattleEnd(playerPokemon);\r\n          return;\r\n        }\r\n      }\r\n\r\n      setPlayerHp(currentPlayerHp);\r\n      setOpponentHp(currentOpponentHp);\r\n\r\n      round++;\r\n    }, 1000);  // Battle simulation runs every second (1000ms)\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Battle Time!</h2>\r\n      <p>Player's Pokemon: {playerPokemon.name} | HP: {playerHp}</p>\r\n      <p>Opponent's Pokemon: {opponentPokemon.name} | HP: {opponentHp}</p>\r\n      <button onClick={startBattle}>Start Battle</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Battle;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}